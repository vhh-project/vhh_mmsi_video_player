// Generated by CoffeeScript 1.10.0
(function() {
  var VhhFilmstrip,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.VhhFilmstrip = VhhFilmstrip = (function() {
    VhhFilmstrip.prototype.MAX_THUMBS_AT_ONCE = 50;

    VhhFilmstrip.prototype.THUMB_WIDTH = 120;

    function VhhFilmstrip(data) {
      this.scrollTimeline = bind(this.scrollTimeline, this);
      this.clickTimeline = bind(this.clickTimeline, this);
      this.$container = $(data.container);
      this.mediator = data.mediator;
      this.mediator.subscribe('frameUpdate', this);
      this.firstFrameNumber = data.firstFrameNumber || 1;
      this.lastFrameNumber = data.lastFrameNumber || 2;
      this.currentFrameNumber = data.currentFrameNumber || this.firstFrameNumber;
      this.follow = data.follow !== false;
      this.path = data.path;
      this.pathDigits = data.pathDigits;
      this.render();
    }

    VhhFilmstrip.prototype.render = function() {
      var html, totalWidth;
      totalWidth = (this.THUMB_WIDTH + 1) * this.lastFrameNumber;
      html = ['<div class="vhh-filmstrip-wrapper noselect vhh-root-node">'];
      html.push("<div class=\"vhh-filmstrip-inner\" style=\"width: " + totalWidth + "px\">");
      html.push('</div></div>');
      this.$container.html(html.join(''));
      this.$el = this.$container.find('> .vhh-filmstrip-wrapper');
      this.$el.scrollLeft(0);
      this.$inner = this.$el.find('.vhh-filmstrip-inner');
      this.attachEvents();
      this.updateThumbImages();
      return this.setCurrentFrame(this.currentIndex);
    };

    VhhFilmstrip.prototype.attachEvents = function() {
      this.$el.find('.vhh-filmstrip-inner').on('click', this.clickTimeline);
      return this.$el.on('scroll', this.scrollTimeline);
    };

    VhhFilmstrip.prototype.detachEvents = function() {
      this.$el.find('.vhh-filmstrip-inner').off('click');
      return this.$el.off('scroll');
    };

    VhhFilmstrip.prototype.remove = function() {
      this.detachEvents();
      this.mediator.unsubscribe('frameUpdate', this);
      return this.$el.remove();
    };

    VhhFilmstrip.prototype.clickTimeline = function(event) {
      var frameNumber;
      frameNumber = Math.floor(Math.floor(event.pageX - this.$el.offset().left + this.$el.scrollLeft()) / (this.THUMB_WIDTH + 1) + 1);
      this.setCurrentFrame(frameNumber, false);
      return this.mediator.setFrame(frameNumber);
    };

    VhhFilmstrip.prototype.scrollTimeline = function(event) {
      return this.updateThumbImages();
    };

    VhhFilmstrip.prototype.followCurrentFrame = function(index) {
      var ref, targetLeft;
      if (!((index != null) || ((ref = this.$activeThumb) != null ? ref.length : void 0) > 0)) {
        return;
      }
      if (index == null) {
        index = this.$activeThumb.data('index');
      }
      targetLeft = index * (this.THUMB_WIDTH + 1) - ((this.$el.width() + this.$activeThumb.width()) / 2);
      targetLeft = Math.max(0, targetLeft);
      return this.$el.scrollLeft(targetLeft);
    };

    VhhFilmstrip.prototype.frameUpdate = function(frameNumber) {
      return this.setCurrentFrame(frameNumber, true);
    };

    VhhFilmstrip.prototype.getThumbPath = function(index) {
      var paddedIndex;
      if (index == null) {
        index = 1;
      }
      paddedIndex = this.padStart(index, this.pathDigits, '0');
      return this.path.replace('%s', paddedIndex);
    };

    VhhFilmstrip.prototype.padStart = function(value, length, character) {
      value = "" + value;
      if (value.length >= length) {
        return value;
      }
      while (value.length < length) {
        value = "" + character + value;
      }
      return value;
    };

    VhhFilmstrip.prototype.setCurrentFrame = function(frameNumber, follow) {
      var ref;
      if (this.currentFrameNumber === frameNumber) {
        return;
      }
      this.currentFrameNumber = frameNumber;
      if ((ref = this.$activeThumb) != null) {
        ref.removeClass('active');
      }
      this.followCurrentFrame(this.currentFrameNumber);
      this.updateThumbImages();
      this.$activeThumb = this.$inner.find(".vhh-filmstrip-thumb-" + frameNumber);
      this.$activeThumb.addClass('active');
      if (follow === true && this.follow) {
        return this.followCurrentFrame();
      }
    };

    VhhFilmstrip.prototype.updateThumbImages = function() {
      var frameNumberLeft, framesAlreadySet, i, index, j, newMaxFrame, newMinFrame, ref, ref1, ref2, ref3;
      frameNumberLeft = Math.floor(this.$el.scrollLeft() / (this.THUMB_WIDTH + 1)) + 1;
      framesAlreadySet = (this.minFrame != null) && (this.maxFrame != null);
      newMinFrame = Math.max(1, frameNumberLeft - Math.floor(this.MAX_THUMBS_AT_ONCE / 2));
      newMaxFrame = Math.min(this.lastFrameNumber, newMinFrame + this.MAX_THUMBS_AT_ONCE - 1);
      if (framesAlreadySet) {
        for (index = i = ref = this.minFrame, ref1 = this.maxFrame; ref <= ref1 ? i <= ref1 : i >= ref1; index = ref <= ref1 ? ++i : --i) {
          if (index < newMinFrame || index > newMaxFrame) {
            this.$inner.find(".vhh-filmstrip-thumb-" + index).remove();
          }
        }
      }
      for (index = j = ref2 = newMinFrame, ref3 = newMaxFrame; ref2 <= ref3 ? j <= ref3 : j >= ref3; index = ref2 <= ref3 ? ++j : --j) {
        if ((!framesAlreadySet) || (index < this.minFrame || index > this.maxFrame)) {
          this.$inner.append(this.thumbTemplate(index));
        }
      }
      this.minFrame = newMinFrame;
      return this.maxFrame = newMaxFrame;
    };

    VhhFilmstrip.prototype.thumbTemplate = function(index) {
      var html, left, path;
      left = (this.THUMB_WIDTH + 1) * (index - 1);
      path = this.getThumbPath(index);
      html = [];
      html.push("<div class=\"vhh-filmstrip-thumb vhh-filmstrip-thumb-" + index + "\" data-index=\"" + index + "\" style=\"left: " + left + "px;\">");
      html.push("<img src=\"" + path + "\" />");
      html.push("<div class=\"vhh-filmstrip-number\">" + index + "</div>");
      html.push('</div>');
      return html.join('');
    };

    return VhhFilmstrip;

  })();

}).call(this);
