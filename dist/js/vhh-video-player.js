// Generated by CoffeeScript 1.10.0
(function() {
  var VhhVideoPlayer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.VhhVideoPlayer = VhhVideoPlayer = (function() {
    var Video;

    VhhVideoPlayer.prototype.MIN_PLAYBACK_RATE = 0.1;

    VhhVideoPlayer.prototype.TIME_OPTIONS = ['frame', 'float', 'smpte', 'simple'];

    VhhVideoPlayer.prototype.TIME_OPTIONS_FILM = ['meter', 'inches'];

    VhhVideoPlayer.prototype.FULLSCREEN_FADE_TIMEOUT = 1000;

    VhhVideoPlayer.prototype.INITIAL_AUDIO_VOLUME = 0.75;

    VhhVideoPlayer.prototype.volumeBeforeMuted = 0.75;

    VhhVideoPlayer.idCounter = 1;

    VhhVideoPlayer.prototype.translations = {
      frame: 'Frame',
      float: 'Float',
      smpte: 'SMPTE',
      simple: 'Time',
      meter: 'Meter',
      inches: 'Inches',
      fps: 'fps',
      "default": 'default',
      quality: 'Quality',
      video_button_prev_shot: 'Jump to previous shot [⇧←]',
      video_button_prev_frame: 'Jump to previous frame [←]',
      video_button_play_reverse: 'Play Reverse / Pause [⇧ + SPACE]',
      video_button_play: 'Play / Pause [SPACE]',
      video_button_next_frame: 'Jump to next frame [→]',
      video_button_next_shot: 'Jump to next shot [⇧→]',
      video_button_fullscreen: 'Fullscreen',
      video_button_settings: 'Settings',
      audio_button: 'Mute / unmute audio',
      other_settings: 'Other Settings',
      mirror: 'Mirror Video',
      mirror_off: 'Mirror off',
      mirror_on: 'Mirror on',
      overscan: 'Overscan',
      overscan_on: 'Hide Maks',
      overscan_off: 'Show Mask',
      zoom: 'Zoom',
      zoom_on: 'Zoom on',
      zoom_off: 'Zoom off'
    };

    VhhVideoPlayer.prototype.hotkeys = [
      {
        key: 32,
        func: 'clickPlay'
      }, {
        key: 32,
        shiftKey: true,
        func: 'clickPlayBackward'
      }, {
        key: 37,
        func: 'clickPrevFrame'
      }, {
        key: 37,
        shiftKey: true,
        func: 'seekPrevShot'
      }, {
        key: 39,
        func: 'clickNextFrame'
      }, {
        key: 39,
        shiftKey: true,
        func: 'seekNextShot'
      }, {
        key: '+',
        func: 'nextFrameRate'
      }, {
        key: '-',
        func: 'prevFrameRate'
      }, {
        key: '0',
        func: 'setDefaultFrameRate'
      }, {
        key: '1',
        func: 'setFrameRate1'
      }, {
        key: '2',
        func: 'setFrameRate2'
      }, {
        key: '6',
        func: 'setFrameRate6'
      }, {
        key: 'j',
        func: 'focusTimeCounter'
      }, {
        key: 'J',
        shiftKey: true,
        func: 'focusTimeCounterAndSelectFrames'
      }
    ];

    VhhVideoPlayer.prototype.playingByInterval = false;

    VhhVideoPlayer.prototype.playbackIntervalId = null;

    VhhVideoPlayer.prototype.playing = false;

    VhhVideoPlayer.prototype.playBackward = false;

    function VhhVideoPlayer(data) {
      this.audioTemplate = bind(this.audioTemplate, this);
      this.updateFrameByInterval = bind(this.updateFrameByInterval, this);
      this.seekPrevShot = bind(this.seekPrevShot, this);
      this.seekPrevFrame = bind(this.seekPrevFrame, this);
      this.seekNextShot = bind(this.seekNextShot, this);
      this.seekNextFrame = bind(this.seekNextFrame, this);
      this.fadeoutFullscreenControls = bind(this.fadeoutFullscreenControls, this);
      this.countFadeoutFullscreenControls = bind(this.countFadeoutFullscreenControls, this);
      this.adjustVideoDimensions = bind(this.adjustVideoDimensions, this);
      this.onTimeupdate = bind(this.onTimeupdate, this);
      this.onPause = bind(this.onPause, this);
      this.onPlay = bind(this.onPlay, this);
      this.onSeeked = bind(this.onSeeked, this);
      this.onLoadedData = bind(this.onLoadedData, this);
      this.onWindowResize = bind(this.onWindowResize, this);
      this.onHlsLevelSwitched = bind(this.onHlsLevelSwitched, this);
      this.onFullscreenchange = bind(this.onFullscreenchange, this);
      this.mouseupAudioVolumeGrip = bind(this.mouseupAudioVolumeGrip, this);
      this.mousemoveFullscreen = bind(this.mousemoveFullscreen, this);
      this.mousemoveAudioVolumeGrip = bind(this.mousemoveAudioVolumeGrip, this);
      this.mousedownAudioVolumeGrip = bind(this.mousedownAudioVolumeGrip, this);
      this.mouseupTimelineGrip = bind(this.mouseupTimelineGrip, this);
      this.mousemoveTimelineGrip = bind(this.mousemoveTimelineGrip, this);
      this.mousedownTimelineGrip = bind(this.mousedownTimelineGrip, this);
      this.keydownVideoInputCounter = bind(this.keydownVideoInputCounter, this);
      this.clickVolumeButton = bind(this.clickVolumeButton, this);
      this.clickVideo = bind(this.clickVideo, this);
      this.clickTimeline = bind(this.clickTimeline, this);
      this.clickPrevFrame = bind(this.clickPrevFrame, this);
      this.clickPlayBackward = bind(this.clickPlayBackward, this);
      this.clickPlay = bind(this.clickPlay, this);
      this.clickNextFrame = bind(this.clickNextFrame, this);
      this.clickFullscreen = bind(this.clickFullscreen, this);
      this.clickAudioVolumeBar = bind(this.clickAudioVolumeBar, this);
      this.blurVideoInputCounter = bind(this.blurVideoInputCounter, this);
      this.handleHotkeys = bind(this.handleHotkeys, this);
      this.clickDropDownItem = bind(this.clickDropDownItem, this);
      this.clickDropdown = bind(this.clickDropdown, this);
      this.clickDocument = bind(this.clickDocument, this);
      var key, ref, ref1, value;
      this.id = 'vhh-video-player-' + VhhVideoPlayer.idCounter;
      VhhVideoPlayer.idCounter++;
      this.$container = $(data.container);
      this.mediator = data.mediator;
      if ((ref = this.mediator) != null) {
        ref.videoPlayer = this;
      }
      this.adjustHeight = data.adjustHeight === true;
      if (!this.adjustHeight) {
        this.adjustHeightToContainer = data.adjustHeightToContainer === true;
      }
      if (!this.adjustHeightToContainer) {
        this.height = data.height || 300;
      }
      if (data.translations != null) {
        ref1 = data.translations;
        for (key in ref1) {
          value = ref1[key];
          this.translations[key] = value;
        }
      }
      this.posterframe = data.video.posterframe;
      this.video = new VhhVideoPlayer.Video(data.video);
      this.currentFps = this.video.fps;
      this.isFilm = data.video.isFilm === true;
      if (this.isFilm) {
        this.timeOptions = this.TIME_OPTIONS.concat(this.TIME_OPTIONS_FILM);
      } else {
        this.timeOptions = this.TIME_OPTIONS;
      }
      this.currentCounterType = 'frame';
      this.calculateFrameOffset = data.calculateFrameOffset || false;
      this.detectFirstFrame = data.detectFirstFrame || false;
      this.canMirror = data.canMirror != null ? data.canMirror : true;
      this.showMirror = false;
      if (data.video.mask != null) {
        this.canShowMask = data.canShowMask != null ? data.canShowMask : false;
        this.showMask = data.showMask != null ? data.showMask === true : false;
        this.canShowZoom = data.canShowZoom != null ? data.canShowZoom === true : false;
        this.showZoom = data.showZoom != null ? (!this.showMask) && data.showZoom === true : false;
      } else {
        this.canShowMask = false;
        this.showMask = false;
        this.canShowZoom = false;
        this.showZoom = false;
      }
      $(document).on('keydown', this.handleHotkeys);
      this.render();
    }

    VhhVideoPlayer.prototype.render = function() {
      var currentHlsItem, html, videoAttributes;
      videoAttributes = [];
      if (this.posterframe != null) {
        videoAttributes.push(" poster=\"" + this.posterframe + "\"");
      }
      html = this.mainTemplate({
        id: this.id,
        videoAttributes: videoAttributes.join(''),
        source: this.video.source,
        canShowMask: this.canShowMask,
        showMask: this.showMask,
        mask: this.video.mask,
        translations: this.translations,
        fpsOptions: this.getFpsOptions(),
        counterOptions: this.getVideoCounterTypeOptions(),
        settingsOptions: this.getSettingsOptions(),
        volume: this.INITIAL_AUDIO_VOLUME * 100
      });
      this.$container.html(html);
      this.$el = $("#" + this.id);
      this.$video = this.$el.find('video');
      this.$videoMask = this.$video.parent();
      this.$overscanMask = this.$el.find('.vhh-video-mask');
      this.$controls = this.$el.find('.vhh-video-player-controls');
      this.$timeline = this.$controls.find('.vhh-video-player-timeline');
      this.$timelineBar = this.$timeline.find('.vhh-video-player-timeline-bar');
      this.$timelineGrip = this.$timelineBar.find('.vhh-video-player-timeline-grip');
      this.$playButton = this.$controls.find('.vhh-video-player-button-play');
      this.$playButtonBackward = this.$controls.find('.vhh-video-player-button-play-backward');
      this.$prevFrameButton = this.$el.find('.vhh-video-player-button-prev-frame');
      this.$nextFrameButton = this.$el.find('.vhh-video-player-button-next-frame');
      this.$prevShotButton = this.$el.find('.vhh-video-player-button-prev-shot');
      this.$nextShotButton = this.$el.find('.vhh-video-player-button-next-shot');
      this.$inputCounter = this.$el.find('.vhh-video-player-input-counter');
      this.$audioVolume = this.$el.find('.vhh-video-player-audio');
      this.$audioVolumeBar = this.$audioVolume.find('.vhh-video-player-audio-bar');
      this.$audioVolumeGrip = this.$audioVolumeBar.find('.vhh-video-player-audio-grip');
      this.$audioVolumeButton = this.$audioVolume.find('button');
      this.$fullscreenButton = this.$el.find('.vhh-video-player-button-fullscreen');
      this.$video[0].volume = this.INITIAL_AUDIO_VOLUME;
      this.setAudioVolume();
      if (this.adjustHeightToContainer === true) {
        this.$el.addClass('adjust-height-to-container');
      } else if (this.height != null) {
        this.$videoMask.parent().css({
          height: this.height + "px"
        });
      }
      $(window).on('resize', this.onWindowResize);
      if ((this.video.hls != null) && Hls.isSupported()) {
        this.hls = new Hls({
          debug: false,
          enableWorker: true
        });
        currentHlsItem = this.video.getHlsByResolution('auto');
        this.hls.loadSource(currentHlsItem.src);
        this.hls.attachMedia(this.$video[0]);
        this.attachVideoEvents();
        return this.attachHlsEvents();
      } else if (this.video.source != null) {
        return this.attachVideoEvents();
      } else {
        return console.warn('Either no HLS support or no source available');
      }
    };

    VhhVideoPlayer.prototype.attachEvents = function() {
      $(document).on('click', this.clickDocument);
      this.$el.find('.vhh-video-player-menu > button').on('click', this.clickDropdown);
      this.$el.find('button.vhh-video-player-menu-list-item').on('click', this.clickDropDownItem);
      this.$playButtonBig = this.$el.find('.vhh-video-player-big-button-play');
      this.$playButtonBig.on('click', this.clickPlay);
      this.$playButton.on('click', this.clickPlay);
      this.$videoMask.parent().on('click', this.clickVideo);
      this.$playButtonBackward.on('click', this.clickPlayBackward);
      this.$prevFrameButton.on('click', this.clickPrevFrame);
      this.$nextFrameButton.on('click', this.clickNextFrame);
      this.$prevShotButton.on('click', this.seekPrevShot);
      this.$nextShotButton.on('click', this.seekNextShot);
      this.$inputCounter.on('keydown', this.keydownVideoInputCounter);
      this.$inputCounter.on('blur', this.blurVideoInputCounter);
      this.$timelineGrip.on('mousedown', this.mousedownTimelineGrip);
      this.$timeline.on('click', this.clickTimeline);
      this.$audioVolumeButton.on('click', this.clickVolumeButton);
      this.$audioVolumeBar.on('click', this.clickAudioVolumeBar);
      this.$audioVolumeGrip.on('mousedown', this.mousedownAudioVolumeGrip);
      this.$el.on('fullscreenchange', this.onFullscreenchange);
      this.$el.on('webkitfullscreenchange', this.onFullscreenchange);
      return this.$fullscreenButton.on('click', this.clickFullscreen);
    };

    VhhVideoPlayer.prototype.attachFullscreenHandlers = function() {
      this.$video.on('mousemove', this.mousemoveFullscreen);
      this.$overscanMask.on('mousemove', this.mousemoveFullscreen);
      return this.$controls.on('mousemove', this.mousemoveFullscreen);
    };

    VhhVideoPlayer.prototype.attachVideoEvents = function() {
      this.$video.on('loadeddata', this.onLoadedData);
      this.$video.on('play', this.onPlay);
      this.$video.on('pause', this.onPause);
      this.$video.on('timeupdate', this.onTimeupdate);
      return this.$video.on('seeked', this.onSeeked);
    };

    VhhVideoPlayer.prototype.attachHlsEvents = function() {
      return this.hls.on(Hls.Events.LEVEL_SWITCHED, this.onHlsLevelSwitched);
    };

    VhhVideoPlayer.prototype.detachFullscreenHandlers = function() {
      this.$video.off('mousemove');
      this.$overscanMask.off('mousemove', this.mousemoveFullscreen);
      this.$controls.off('mousemove', this.mousemoveFullscreen);
      if (this.fullscreenFadeTimer != null) {
        window.clearTimeout(this.fullscreenFadeTimer);
        delete this.fullscreenFadeTimer;
      }
      return this.$controls.stop();
    };

    VhhVideoPlayer.prototype.detachHlsEvents = function() {
      return this.hls.off('Hls.Events.LEVEL_SWITCHED');
    };

    VhhVideoPlayer.prototype.detachVideoEvents = function() {
      this.$video.off('loadeddata');
      this.$video.off('play');
      this.$video.off('pause');
      return this.$video.off('timeupdate');
    };

    VhhVideoPlayer.prototype.remove = function() {
      var ref;
      $(document).off('keydown', this.handleHotkeys);
      this.removeTimelineHandlers();
      this.mouseupAudioVolumeGrip();
      this.detachVideoEvents();
      if (this.hls != null) {
        this.detachHlsEvents();
      }
      $(window).off('resize', this.onWindowResize);
      this.$el.find('.vhh-video-player-menu > button').off('click');
      this.$el.find('.vhh-video-player-menu-list-item').off('click');
      this.removePlayButtonBig();
      this.$playButton.off('click');
      this.$video.off('click');
      this.$playButtonBackward.off('click');
      this.$prevFrameButton.off('click');
      this.$nextFrameButton.off('click');
      this.$prevShotButton.off('click');
      this.$nextShotButton.off('click');
      this.$inputCounter.off('keydown');
      this.$inputCounter.off('blur');
      this.$timelineGrip.off('mousedown');
      this.$timeline.off('click');
      this.$audioVolumeButton.off('click');
      this.$audioVolumeBar.off('click');
      this.$audioVolumeGrip.off('mousedown');
      this.$el.off('fullscreenchange');
      this.$fullscreenButton.off('click');
      this.detachFullscreenHandlers();
      this.$el.remove();
      this.clearFrameInterval();
      return (ref = this.hls) != null ? ref.destroy() : void 0;
    };

    VhhVideoPlayer.prototype.removeTimelineHandlers = function() {
      return $(window).off('mousemove', this.mousemoveTimelineGrip).off('mouseup', this.mouseupTimelineGrip);
    };

    VhhVideoPlayer.prototype.clickDocument = function() {
      this.blurControlFullscreen();
      return this.closeMenus();
    };

    VhhVideoPlayer.prototype.clickDropdown = function(event) {
      var $menu;
      event.stopPropagation();
      $menu = $(event.currentTarget).parent();
      this.closeMenus($menu[0]);
      if ($menu.hasClass('open')) {
        $menu.removeClass('open');
        return this.blurControlFullscreen();
      } else {
        $menu.addClass('open');
        return this.focusControlFullscreen();
      }
    };

    VhhVideoPlayer.prototype.clickDropDownItem = function(event) {
      var $menu, $node, key, value;
      $node = $(event.currentTarget);
      $menu = $node.closest('.vhh-video-player-menu');
      key = $node.data('key');
      value = $node.data('value');
      $node.parent().find("[data-key=\"" + key + "\"]").removeClass('active');
      $node.addClass('active');
      if ($menu.data('change-button')) {
        $menu.find('> button > span').text($node.find('.text').text());
      }
      this.blurControlFullscreen();
      return this.clickMenuItem(key, value);
    };

    VhhVideoPlayer.prototype.handleHotkeys = function(event) {
      var found, hotkey, i, len, name, ref, ref1, results, shiftKey;
      if (((ref = event.target.nodeName) === 'INPUT' || ref === 'TEXTAREA') || event.metaKey === true || event.ctrlKey === true || event.altKey === true) {
        return;
      }
      ref1 = this.hotkeys;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        hotkey = ref1[i];
        found = false;
        shiftKey = hotkey.shiftKey === true;
        if (shiftKey === event.shiftKey) {
          if (typeof hotkey.key === 'string') {
            found = hotkey.key === event.key;
          } else if (typeof hotkey.key === 'number') {
            found = hotkey.key === event.keyCode;
          }
          if (found === true) {
            event.stopPropagation();
            event.preventDefault();
            results.push(typeof this[name = hotkey.func] === "function" ? this[name]() : void 0);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    VhhVideoPlayer.prototype.blurVideoInputCounter = function(event) {
      this.blurControlFullscreen();
      return this.updateInputCounter(event.currentTarget);
    };

    VhhVideoPlayer.prototype.clickAudioVolumeBar = function(event) {
      var offsetX;
      offsetX = event.pageX - this.$audioVolumeBar.offset().left;
      return this.setAudioVolume(offsetX / this.$audioVolumeBar.innerWidth());
    };

    VhhVideoPlayer.prototype.clickFullscreen = function() {
      if (document.fullscreenEnabled) {
        if (document.fullscreenElement !== null) {
          return document.exitFullscreen();
        } else {
          return this.$el[0].requestFullscreen();
        }
      } else if (document.webkitFullscreenEnabled) {
        if (document.webkitFullscreenElement !== null) {
          return document.webkitExitFullscreen();
        } else {
          return this.$el[0].webkitRequestFullscreen();
        }
      } else {
        return console.warn('Fullscreen API not available in this browser');
      }
    };

    VhhVideoPlayer.prototype.clickMenuItem = function(key, value) {
      switch (key) {
        case 'fps':
          return this.selectFps(value);
        case 'counter-option':
          return this.selectCounterType(value);
        case 'hls':
          return this.selectHlsByResolution(value);
        case 'mirror':
          return this.changeMirroring(value);
        case 'overscan':
          return this.changeOverscan(value);
        case 'zoom':
          return this.changeZoom(value);
      }
    };

    VhhVideoPlayer.prototype.clickNextFrame = function() {
      this.playing = false;
      this.playBackward = false;
      this.togglePlaying();
      return this.seekNextFrame();
    };

    VhhVideoPlayer.prototype.clickPlay = function(event) {
      if (event != null) {
        event.stopPropagation();
      }
      if (!(this.playBackward === true && this.playing === true)) {
        this.playing = !this.playing;
      }
      this.playBackward = false;
      return this.togglePlaying();
    };

    VhhVideoPlayer.prototype.clickPlayBackward = function() {
      if (!(this.playBackward === false && this.playing === true)) {
        this.playing = !this.playing;
      }
      this.playBackward = true;
      return this.togglePlaying();
    };

    VhhVideoPlayer.prototype.clickPrevFrame = function() {
      this.playing = false;
      this.playBackward = false;
      this.togglePlaying();
      return this.seekPrevFrame();
    };

    VhhVideoPlayer.prototype.clickTimeline = function(event) {
      var offsetX;
      offsetX = event.pageX - this.$timeline.offset().left;
      return this.seekRelative(offsetX / this.$timeline.innerWidth());
    };

    VhhVideoPlayer.prototype.clickVideo = function(event) {
      if (event != null) {
        event.stopPropagation();
      }
      this.closeMenus();
      if (this.playing) {
        this.playing = false;
        this.playBackward = false;
        return this.togglePlaying();
      } else {
        return this.clickPlay();
      }
    };

    VhhVideoPlayer.prototype.clickVolumeButton = function() {
      var newVolume;
      if (this.$video[0].volume > 0) {
        this.volumeBeforeMuted = this.$video[0].volume;
        newVolume = 0;
      } else {
        newVolume = this.volumeBeforeMuted || this.INITIAL_AUDIO_VOLUME;
      }
      return this.setAudioVolume(newVolume);
    };

    VhhVideoPlayer.prototype.focusTimeCounter = function() {
      this.focusControlFullscreen();
      return this.$el.find('.vhh-video-player-input-counter').focus().select();
    };

    VhhVideoPlayer.prototype.focusTimeCounterAndSelectFrames = function() {
      this.focusControlFullscreen();
      this.$el.find('.select-vhh-video-player-counter-type button[data-value="frame"]').click();
      return this.focusTimeCounter();
    };

    VhhVideoPlayer.prototype.keydownVideoInputCounter = function(event) {
      if (event.keyCode === 13) {
        this.seek(event.currentTarget.value, this.currentCounterType);
        return event.currentTarget.blur();
      } else if (event.keyCode === 27) {
        return event.currentTarget.blur();
      }
    };

    VhhVideoPlayer.prototype.mousedownTimelineGrip = function() {
      this.focusControlFullscreen();
      this.$timelineGrip.addClass('dragging');
      this.$timelineBar.addClass('no-update');
      return $(window).on('mousemove', this.mousemoveTimelineGrip).on('mouseup', this.mouseupTimelineGrip);
    };

    VhhVideoPlayer.prototype.mousemoveTimelineGrip = function(event) {
      return this.clickTimeline(event);
    };

    VhhVideoPlayer.prototype.mouseupTimelineGrip = function() {
      this.$timelineGrip.removeClass('dragging');
      this.$timelineBar.removeClass('no-update');
      this.clickTimeline(event);
      this.blurControlFullscreen();
      return this.removeTimelineHandlers();
    };

    VhhVideoPlayer.prototype.mousedownAudioVolumeGrip = function() {
      this.focusControlFullscreen();
      return $(window).on('mousemove', this.mousemoveAudioVolumeGrip).on('mouseup', this.mouseupAudioVolumeGrip);
    };

    VhhVideoPlayer.prototype.mousemoveAudioVolumeGrip = function(event) {
      return this.clickAudioVolumeBar(event);
    };

    VhhVideoPlayer.prototype.mousemoveFullscreen = function() {
      if (!(document.fullscreenElement || document.webkitFullscreenElement)) {
        return;
      }
      if (this.fullscreenIn === true) {
        return this.countFadeoutFullscreenControls();
      } else {
        this.$controls.stop();
        this.fullscreenIn = true;
        this.$controls.css({
          display: 'block'
        });
        return this.$controls.animate({
          opacity: 1
        }, {
          complete: this.countFadeoutFullscreenControls
        });
      }
    };

    VhhVideoPlayer.prototype.mouseupAudioVolumeGrip = function(event) {
      if (event != null) {
        this.clickAudioVolumeBar(event);
        this.blurControlFullscreen();
      }
      return $(window).off('mousemove', this.mousemoveAudioVolumeGrip).off('mouseup', this.mouseupAudioVolumeGrip);
    };

    VhhVideoPlayer.prototype.selectCounterType = function(value) {
      this.currentCounterType = value;
      return this.updateInputCounter();
    };

    VhhVideoPlayer.prototype.selectHlsByResolution = function(value) {
      var hls, index;
      hls = this.video.getHlsByResolution(value);
      index = this.getHlsIndexBySrc(hls.src);
      return this.hls.currentLevel = index;
    };

    VhhVideoPlayer.prototype.selectFps = function(value) {
      this.currentFps = parseInt(value);
      return this.updatePlaybackRate();
    };

    VhhVideoPlayer.prototype.changeMirroring = function(value) {
      this.showMirror = value === 'on';
      return this.$videoMask.parent().toggleClass('vhh-video-player-mirrored', this.showMirror);
    };

    VhhVideoPlayer.prototype.changeOverscan = function(value) {
      var $menu;
      $menu = this.$el.find('.vhh-video-player-menu');
      $menu.find('[data-key="zoom"][data-value="off"]').addClass('active');
      $menu.find('[data-key="zoom"][data-value="on"]').removeClass('active');
      this.$video.toggleClass('vhh-video-zoomed', false);
      this.showZoom = false;
      this.showMask = value === 'off';
      this.$overscanMask.toggleClass('vhh-video-mask-show', this.showMask);
      return this.adjustVideoDimensions();
    };

    VhhVideoPlayer.prototype.changeZoom = function(value) {
      var $menu;
      $menu = this.$el.find('.vhh-video-player-menu');
      $menu.find('[data-key="overscan"][data-value="off"]').removeClass('active');
      $menu.find('[data-key="overscan"][data-value="on"]').addClass('active');
      this.$overscanMask.toggleClass('vhh-video-mask-show', false);
      this.showMask = false;
      this.showZoom = value === 'on';
      this.$overscanMask.toggleClass('vhh-video-zoomed', this.showZoom);
      return this.adjustVideoDimensions();
    };

    VhhVideoPlayer.prototype.onFullscreenchange = function(event) {
      if (document.fullscreenElement || document.webkitFullscreenElement) {
        this.$el.addClass('fullscreen');
        this.$video.css({
          height: ''
        });
        this.$controls.css({
          opacity: 1,
          display: 'block'
        });
        this.countFadeoutFullscreenControls();
        this.attachFullscreenHandlers();
      } else {
        this.$el.removeClass('fullscreen');
        this.$controls.css({
          'display': '',
          'opacity': 1
        });
        this.detachFullscreenHandlers();
      }
      return window.setTimeout(this.adjustVideoDimensions, 100);
    };

    VhhVideoPlayer.prototype.onHlsLevelSwitched = function(eventType, data) {
      var $text, hlsItem;
      $text = this.$el.find('.vhh-video-player-quality');
      hlsItem = this.video.getHlsByUrl(this.hls.levels[data.level].url[0]);
      if (hlsItem != null) {
        return $text.text(hlsItem.label);
      } else {
        return $text.text('');
      }
    };

    VhhVideoPlayer.prototype.onWindowResize = function() {
      if (!(this.$el.hasClass('fullscreen') || this.adjustHeightToContainer)) {
        return;
      }
      return this.adjustVideoDimensions();
    };

    VhhVideoPlayer.prototype.onLoadedData = function() {
      this.adjustVideoDimensions();
      this.$controls.addClass('video-loaded');
      this.attachEvents();
      if (this.calculateFrameOffset === true && (this.video.frames != null) && !isNaN(this.video.frames)) {
        this.video.frameOffset = Math.max(0, this.$video[0].duration - (this.video.frames * this.video.frameLength) + (this.video.frameLength * 0.2));
        this.video.frameOffset = Math.min(this.video.frameOffset, this.video.frameLength * 0.95);
        return this.video.lastFrameTime = this.video.frameLength * (this.video.frames - 1) + (this.video.frameLength / 4) + this.video.frameOffset;
      } else if (this.detectFirstFrame === true) {
        this.detectFirstFrameTimeLength = this.video.frameLength / 10;
        this.firstFrameCanvas = document.createElement('canvas');
        this.firstFrameCanvas.width = 10;
        this.firstFrameCanvas.height = 10;
        this.firstFrameContext = this.firstFrameCanvas.getContext('2d');
        return this.$video[0].currentTime = this.video.frameLength / 2;
      }
    };

    VhhVideoPlayer.prototype.onSeeked = function(event) {
      var pixel;
      if (this.detectFirstFrame === true) {
        this.firstFrameContext.drawImage(this.$video[0], 0, 0, 10, 10);
        pixel = this.firstFrameContext.getImageData(1, 1, 1, 1).data;
        if (pixel[0] >= 200 && pixel[1] > 200 && pixel[2] > 200 && pixel[3] > 200) {
          return this.$video[0].currentTime += this.detectFirstFrameTimeLength;
        } else {
          delete this.detectFirstFrame;
          delete this.detectFirstFrameTimeLength;
          delete this.firstFrameContext;
          delete this.firstFrameCanvas;
          this.video.frameOffset = Math.max(0, this.$video[0].currentTime - this.video.frameLength);
          this.video.lastFrameTime = this.video.frameLength * (this.video.frames - 1) + (this.video.frameLength / 4) + this.video.frameOffset;
          return this.seek(1, 'frame');
        }
      }
    };

    VhhVideoPlayer.prototype.onPlay = function() {
      this.playing = true;
      return this.toggleControls();
    };

    VhhVideoPlayer.prototype.onPause = function() {
      if (this.playingByInterval === true) {
        return;
      }
      this.playing = false;
      this.toggleControls();
      return this.seek(this.$video[0].currentTime, ' ');
    };

    VhhVideoPlayer.prototype.onTimeupdate = function() {
      if (!this.$timelineBar.hasClass('no-update')) {
        this.updateTimeline();
      }
      return this.updateInputCounter();
    };

    VhhVideoPlayer.prototype.adjustVideoDimensions = function() {
      var $wrapper, adjustHeight, boxH, boxV, transform, videoAspect, videoHeight, videoLeft, videoMaskCSS, videoTop, videoWidth, wrapperAspect, wrapperHeight, wrapperWidth, zoomAspect, zoomH, zoomV;
      $wrapper = this.$videoMask.parent();
      $wrapper.css({
        height: ''
      });
      wrapperWidth = $wrapper.width();
      videoAspect = this.$video[0].videoWidth / this.$video[0].videoHeight;
      adjustHeight = this.adjustHeight === true && !this.$el.hasClass('fullscreen');
      if (this.showZoom) {
        boxH = Math.max(0.1, 1 - this.video.mask.left - this.video.mask.right);
        boxV = Math.max(0.1, 1 - this.video.mask.top - this.video.mask.bottom);
        zoomH = 1 / boxH;
        zoomV = 1 / boxV;
        if (adjustHeight) {
          wrapperHeight = wrapperWidth * zoomH / videoAspect * boxV;
          $wrapper.css({
            height: wrapperHeight + "px"
          });
          if (boxH < boxV) {
            videoLeft = ((zoomH - 1) / 2) - (this.video.mask.left * zoomH);
            videoTop = ((1 - boxV) / boxV / 2) - (this.video.mask.top / boxV);
            videoMaskCSS = {
              width: "" + wrapperWidth,
              height: "" + wrapperHeight,
              left: 0,
              top: 0
            };
            this.$video.css({
              transform: "translate(" + (videoLeft * 100) + "%, " + (videoTop * 100) + "%) scale(" + zoomH + ", " + zoomH + ")"
            });
          } else {
            videoLeft = ((1 - boxH) / boxH / 2) - (this.video.mask.left / boxH);
            videoTop = ((zoomV - 1) / 2) - (this.video.mask.top * zoomV);
            videoMaskCSS = {
              width: "" + wrapperWidth,
              height: "" + wrapperHeight,
              left: 0,
              top: 0
            };
            this.$video.css({
              transform: "translate(" + (videoLeft * 100) + "%, " + (videoTop * 100) + "%) scale(" + zoomV + ", " + zoomV + ")"
            });
          }
        } else {
          if (this.adjustHeightToContainer || this.$el.hasClass('fullscreen')) {
            wrapperHeight = $wrapper.height();
          } else {
            wrapperHeight = this.height;
            $wrapper.css({
              height: wrapperHeight + "px"
            });
          }
          wrapperAspect = wrapperWidth / wrapperHeight;
          zoomAspect = zoomV / zoomH * videoAspect;
          if (boxH < boxV) {
            videoLeft = ((zoomH - 1) / 2) - (this.video.mask.left * zoomH);
            videoTop = ((1 - boxV) / boxV / 2) - (this.video.mask.top / boxV);
            transform = "translate(" + (videoLeft * 100) + "%, " + (videoTop * 100) + "%) scale(" + zoomH + ", " + zoomH + ")";
          } else {
            videoLeft = ((1 - boxH) / boxH / 2) - (this.video.mask.left / boxH);
            videoTop = ((zoomV - 1) / 2) - (this.video.mask.top * zoomV);
            transform = "translate(" + (videoLeft * 100) + "%, " + (videoTop * 100) + "%) scale(" + zoomV + ", " + zoomV + ")";
          }
          if (wrapperAspect <= zoomAspect) {
            videoWidth = wrapperWidth;
            videoHeight = wrapperWidth * zoomH / videoAspect * boxV;
            videoMaskCSS = {
              width: videoWidth + "px",
              height: videoHeight + "px",
              left: 0,
              top: ((wrapperHeight - videoHeight) / 2) + "px"
            };
            this.$video.css({
              transform: transform
            });
          } else {
            videoWidth = wrapperHeight / zoomH * videoAspect / boxV;
            videoHeight = wrapperHeight;
            videoMaskCSS = {
              width: videoWidth + "px",
              height: videoHeight + "px",
              left: ((wrapperWidth - videoWidth) / 2) + "px",
              top: 0
            };
            this.$video.css({
              transform: transform
            });
          }
        }
      } else {
        this.$video.css({
          transform: ''
        });
        if (adjustHeight) {
          wrapperHeight = wrapperWidth / videoAspect;
          $wrapper.css({
            height: wrapperHeight + "px"
          });
          videoMaskCSS = {
            width: wrapperWidth + "px",
            height: wrapperHeight + "px",
            left: 0,
            top: 0
          };
        } else {
          if (this.adjustHeightToContainer || this.$el.hasClass('fullscreen')) {
            wrapperHeight = $wrapper.height();
          } else {
            wrapperHeight = this.height;
            $wrapper.css({
              height: wrapperHeight + "px"
            });
          }
          wrapperAspect = wrapperWidth / wrapperHeight;
          if (wrapperAspect < videoAspect) {
            videoMaskCSS = {
              width: wrapperWidth + "px",
              height: (wrapperWidth / videoAspect) + "px",
              left: 0,
              top: ((wrapperHeight - (wrapperWidth / videoAspect)) / 2) + "px"
            };
          } else {
            videoMaskCSS = {
              width: (wrapperHeight * videoAspect) + "px",
              height: wrapperHeight + "px",
              left: ((wrapperWidth - (wrapperHeight * videoAspect)) / 2) + "px",
              top: 0
            };
          }
        }
        this.$overscanMask.css(videoMaskCSS);
      }
      return this.$videoMask.css(videoMaskCSS);
    };

    VhhVideoPlayer.prototype.blurControlFullscreen = function() {
      this.controlFocused = false;
      return this.countFadeoutFullscreenControls();
    };

    VhhVideoPlayer.prototype.clearFrameInterval = function() {
      if (this.playbackIntervalId != null) {
        window.clearInterval(this.playbackIntervalId);
        return delete this.playbackIntervalId;
      }
    };

    VhhVideoPlayer.prototype.closeMenus = function(clickedMenu) {
      var $menus;
      $menus = this.$el.find('.vhh-video-player-menu');
      if (clickedMenu != null) {
        return $menus.each(function() {
          if (this !== clickedMenu) {
            return $(this).removeClass('open');
          }
        });
      } else {
        return $menus.removeClass('open');
      }
    };

    VhhVideoPlayer.prototype.countFadeoutFullscreenControls = function() {
      if (this.fullscreenFadeTimer != null) {
        window.clearTimeout(this.fullscreenFadeTimer);
      }
      if (this.controlFocused === true || ((!document.fullscreenElement) && (!document.webkitFullscreenElement))) {
        return;
      }
      return this.fullscreenFadeTimer = window.setTimeout(this.fadeoutFullscreenControls, this.FULLSCREEN_FADE_TIMEOUT);
    };

    VhhVideoPlayer.prototype.fadeoutFullscreenControls = function() {
      delete this.fullscreenFadeTimer;
      this.fullscreenIn = false;
      return this.$controls.animate({
        opacity: 0
      }, {
        complete: (function(_this) {
          return function() {
            return _this.$controls.css({
              display: ''
            });
          };
        })(this)
      });
    };

    VhhVideoPlayer.prototype.focusControlFullscreen = function() {
      this.controlFocused = true;
      return this.mousemoveFullscreen();
    };

    VhhVideoPlayer.prototype.getSettingsOptions = function() {
      var hlsItem, i, items, len, ref;
      items = [];
      if ((this.video.hls != null) && Hls.isSupported()) {
        items.push({
          type: 'custom',
          html: "<strong>" + this.translations.quality + "</strong><span class=\"vhh-video-player-quality\">720p</span>"
        });
        ref = this.video.hls;
        for (i = 0, len = ref.length; i < len; i++) {
          hlsItem = ref[i];
          items.push({
            active: hlsItem.resolution === 'Auto',
            label: hlsItem.label,
            key: 'hls',
            value: hlsItem.resolution
          });
        }
      }
      if (this.canMirror === true) {
        items.push({
          type: 'custom',
          html: "<strong>" + this.translations.mirror + "</strong>"
        });
        items.push({
          active: true,
          label: this.translations.mirror_off,
          key: 'mirror',
          value: 'off'
        });
        items.push({
          active: false,
          label: this.translations.mirror_on,
          key: 'mirror',
          value: 'on'
        });
      }
      if (this.canShowMask === true) {
        items.push({
          type: 'custom',
          html: "<strong>" + this.translations.overscan + "</strong>"
        });
        items.push({
          active: this.showMask === false,
          label: this.translations.overscan_on,
          key: 'overscan',
          value: 'on'
        });
        items.push({
          active: this.showMask === true,
          label: this.translations.overscan_off,
          key: 'overscan',
          value: 'off'
        });
      }
      if (this.canShowZoom === true) {
        items.push({
          type: 'custom',
          html: "<strong>" + this.translations.zoom + "</strong>"
        });
        items.push({
          active: this.showZoom === false,
          label: this.translations.zoom_off,
          key: 'zoom',
          value: 'off'
        });
        items.push({
          active: this.showZoom === true,
          label: this.translations.zoom_on,
          key: 'zoom',
          value: 'on'
        });
      }
      return {
        className: 'select-vhh-video-player-settings',
        alignRight: true,
        changeButton: false,
        buttonLabel: '<i class="fa fa-cog"></i>',
        borderless: true,
        items: items
      };
    };

    VhhVideoPlayer.prototype.getFpsOptions = function() {
      var commas, i, items, labelValue, len, ref, value;
      items = [];
      ref = this.video.fpsOptions;
      for (i = 0, len = ref.length; i < len; i++) {
        value = ref[i];
        commas = value - Math.floor(value);
        labelValue = ("" + commas).length > 4 ? value.toFixed(2) : value;
        items.push({
          "default": value === this.currentFps,
          active: value === this.currentFps,
          label: labelValue + " " + this.translations.fps,
          key: 'fps',
          value: value
        });
      }
      commas = this.currentFps - Math.floor(this.currentFps);
      labelValue = ("" + commas).length > 4 ? this.currentFps.toFixed(2) : this.currentFps;
      return {
        className: 'select-vhh-video-player-fps',
        changeButton: true,
        buttonLabel: labelValue + " " + this.translations.fps,
        defaultLabel: this.translations["default"],
        items: items
      };
    };

    VhhVideoPlayer.prototype.getHlsIndexBySrc = function(src) {
      var i, index, len, level, ref;
      ref = this.hls.levels;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        level = ref[index];
        if (level.url[0].indexOf(src) > -1) {
          return index;
        }
      }
      return -1;
    };

    VhhVideoPlayer.prototype.getVideoCounterTypeOptions = function() {
      var i, items, len, ref, value;
      items = [];
      ref = this.timeOptions;
      for (i = 0, len = ref.length; i < len; i++) {
        value = ref[i];
        items.push({
          active: value === this.currentCounterType,
          label: this.translations[value] || value,
          key: 'counter-option',
          value: value
        });
      }
      return {
        className: 'select-vhh-video-player-counter-type',
        changeButton: true,
        buttonLabel: this.translations.frame,
        items: items
      };
    };

    VhhVideoPlayer.prototype.nextFrameRate = function() {
      return this.$el.find('.select-vhh-video-player-fps .active').next().click();
    };

    VhhVideoPlayer.prototype.playByFrameInterval = function() {
      var intervalTime;
      intervalTime = Math.floor(1000 / this.currentFps);
      return this.playbackIntervalId = window.setInterval(this.updateFrameByInterval, intervalTime);
    };

    VhhVideoPlayer.prototype.prevFrameRate = function() {
      return this.$el.find('.select-vhh-video-player-fps .active').prev().click();
    };

    VhhVideoPlayer.prototype.removePlayButtonBig = function() {
      if (this.$playButtonBig != null) {
        this.$playButtonBig.off('click');
        this.$playButtonBig.remove();
        return delete this.$playButtonBig;
      }
    };

    VhhVideoPlayer.prototype.seek = function(value, type) {
      var targetTime;
      if (type == null) {
        type = 'frame';
      }
      this.removePlayButtonBig();
      targetTime = Math.max(this.video.frameOffset, this.video.convertToVideoTime(value, type, this.$video[0].currentTime));
      if (this.video.lastFrameTime != null) {
        targetTime = Math.min(targetTime, this.video.lastFrameTime);
      }
      return this.$video[0].currentTime = targetTime;
    };

    VhhVideoPlayer.prototype.seekNextFrame = function() {
      var currentFrame;
      currentFrame = this.video.formatVideoTime(this.$video[0].currentTime);
      return this.seek(currentFrame + 1, 'frame');
    };

    VhhVideoPlayer.prototype.seekNextShot = function() {
      var shot;
      shot = this.video.getNextShot(this.video.formatVideoTime(this.$video[0].currentTime, 'frame'));
      if (shot != null) {
        return this.seek(shot["in"], 'frame');
      } else {
        return this.seek(this.video.lastFrameTime, 'float');
      }
    };

    VhhVideoPlayer.prototype.seekPrevFrame = function() {
      var currentFrame;
      currentFrame = this.video.formatVideoTime(this.$video[0].currentTime);
      return this.seek(currentFrame - 1, 'frame');
    };

    VhhVideoPlayer.prototype.seekPrevShot = function() {
      var shot;
      shot = this.video.getPrevShot(this.video.formatVideoTime(this.$video[0].currentTime, 'frame'));
      if (shot != null) {
        return this.seek(shot["in"], 'frame');
      } else {
        return this.seek(0, 'float');
      }
    };

    VhhVideoPlayer.prototype.seekRelative = function(relativeNumber) {
      var currentTime;
      if (relativeNumber == null) {
        relativeNumber = 0;
      }
      if (isNaN(relativeNumber) || relativeNumber < 0) {
        relativeNumber = 0;
      }
      relativeNumber = Math.min(1, relativeNumber);
      currentTime = this.$video[0].duration * relativeNumber;
      this.$video[0].currentTime = currentTime;
      return this.updateTimeline(currentTime);
    };

    VhhVideoPlayer.prototype.setAudioVolume = function(volume) {
      var $icon, className, i, icon, icons, index, len, volumeIndex;
      if (volume != null) {
        volume = Math.max(Math.min(1, volume), 0);
        this.$video[0].volume = volume;
      } else {
        volume = this.$video[0].volume;
      }
      icons = ['off', 'down', 'up'];
      if (volume === 0) {
        volumeIndex = 0;
      } else if (volume < 0.75) {
        volumeIndex = 1;
      } else {
        volumeIndex = 2;
      }
      $icon = this.$audioVolumeButton.find('.fa');
      for (index = i = 0, len = icons.length; i < len; index = ++i) {
        icon = icons[index];
        className = "fa-volume-" + icons[index];
        $icon.toggleClass(className, index === volumeIndex);
      }
      return this.$audioVolumeBar.find('> div').css({
        width: (Math.floor(volume * 100)) + "%"
      });
    };

    VhhVideoPlayer.prototype.setDefaultFrameRate = function() {
      return this.$el.find('.select-vhh-video-player-fps .default').click();
    };

    VhhVideoPlayer.prototype.setCurrentFrame = function(frameNumber) {
      return this.seek(frameNumber, 'frame');
    };

    VhhVideoPlayer.prototype.setFrameRate1 = function() {
      return this.$el.find('.select-vhh-video-player-fps .vhh-video-player-menu-list-item[data-value="1"]').click();
    };

    VhhVideoPlayer.prototype.setFrameRate2 = function() {
      return this.$el.find('.select-vhh-video-player-fps .vhh-video-player-menu-list-item[data-value="2"]').click();
    };

    VhhVideoPlayer.prototype.setFrameRate6 = function() {
      return this.$el.find('.select-vhh-video-player-fps .vhh-video-player-menu-list-item[data-value="6"]').click();
    };

    VhhVideoPlayer.prototype.toggleControls = function() {
      return this.$controls.toggleClass('playing', this.playing).toggleClass('playing-backward', this.playBackward);
    };

    VhhVideoPlayer.prototype.togglePlaying = function() {
      this.removePlayButtonBig();
      this.toggleControls();
      if (this.playing === true) {
        this.updatePlaybackRate();
        if (this.playingByInterval === false) {
          return this.$video[0].play();
        }
      } else {
        if (this.playingByInterval === true) {
          return this.clearFrameInterval();
        } else {
          return this.$video[0].pause();
        }
      }
    };

    VhhVideoPlayer.prototype.updateFrameByInterval = function() {
      if (this.playBackward === true) {
        if (this.$video[0].currentTime === 0) {
          this.playing = false;
          return this.togglePlaying();
        } else {
          return this.seekPrevFrame();
        }
      } else {
        if (this.$video[0].currentTime === this.$video[0].duration) {
          this.playing = false;
          return this.togglePlaying();
        } else {
          return this.seekNextFrame();
        }
      }
    };

    VhhVideoPlayer.prototype.updateInputCounter = function() {
      var value;
      value = this.video.formatVideoTime(this.$video[0].currentTime, this.currentCounterType);
      return this.$inputCounter.val(value);
    };

    VhhVideoPlayer.prototype.updatePlaybackRate = function() {
      var newRate;
      newRate = this.currentFps / this.video.fps;
      this.clearFrameInterval();
      this.playingByInterval = this.playBackward === true || newRate < this.MIN_PLAYBACK_RATE;
      if (this.playingByInterval === true) {
        this.$video[0].pause();
        if (this.playing === true) {
          return this.playByFrameInterval();
        }
      } else {
        this.$video[0].playbackRate = newRate;
        if (this.playing === true) {
          return this.$video[0].play();
        }
      }
    };

    VhhVideoPlayer.prototype.updateTimeline = function(currentTime) {
      var currentFrame, ref;
      if (currentTime == null) {
        currentTime = this.$video[0].currentTime;
      }
      currentFrame = this.video.formatVideoTime(currentTime, 'frame');
      if ((ref = this.mediator) != null) {
        ref.updateFrame(currentFrame);
      }
      return this.$timelineBar.css({
        width: (100 * (this.$video[0].currentTime / this.$video[0].duration)) + "%"
      });
    };

    VhhVideoPlayer.prototype.mainTemplate = function(data) {
      var bottom, left, result, right, showMaskString, top;
      result = [];
      result.push("<div id=\"" + data.id + "\" class=\"vhh-video-player-wrapper vhh-root-node\">");
      result.push('<div class="vhh-video-player-frame-wrapper">');
      result.push('<div class="vhh-video-player-mask">');
      result.push("<video class=\"vhh-video-player-canvas\"" + data.videoAttributes + " oncontextmenu=\"return false;\">");
      if (data.source != null) {
        result.push("<source src=\"" + data.source.src + "\" type=\"" + data.source.type + "\">");
      }
      result.push('</video>');
      result.push('</div>');
      if (data.canShowMask) {
        showMaskString = data.showMask ? ' vhh-video-mask-show' : '';
        left = Math.floor(data.mask.left * 100);
        right = Math.floor(data.mask.right * 100);
        top = Math.floor(data.mask.top * 100);
        bottom = Math.floor(data.mask.bottom * 100);
        result.push("<div class=\"vhh-video-mask" + showMaskString + "\"><div style=\"height: " + top + "%;\"></div><div style=\"top: " + top + "%; bottom: " + bottom + "%; width: " + right + "%;\"></div><div style=\"height: " + bottom + "%;\"></div><div style=\"top: " + top + "%; bottom: " + bottom + "%; width: " + left + "%\"></div></div>");
      }
      result.push('<div class="vhh-video-player-big-button-play"><i class="fa fa-play"></i></div>');
      result.push('</div>');
      result.push('<div class="vhh-video-player-controls">');
      result.push('<div class="vhh-video-player-timeline-wrapper">');
      result.push('<div class="vhh-video-player-timeline">');
      result.push('<div class="vhh-video-player-timeline-bar">');
      result.push('<div class="vhh-video-player-timeline-grip"></div>');
      result.push('</div></div></div>');
      result.push('<div class="vhh-video-player-controls-row clearfix">');
      result.push('<div class="vhh-video-player-col-left">');
      result.push(this.menuTemplate(data.counterOptions));
      result.push(' <input class="vhh-video-player-input-counter" type="text" data-type="frame" value="1" /> ');
      result.push(this.menuTemplate(data.fpsOptions));
      result.push('</div>');
      result.push('<div class="vhh-video-player-col-center">');
      result.push("<button class=\"vhh-video-player-button vhh-video-player-button-prev-shot\" type=\"button\" title=\"" + data.translations.video_button_prev_shot + "\"><i class=\"fa fa-backward\"></i></button>");
      result.push("<button class=\"vhh-video-player-button vhh-video-player-button-prev-frame\" type=\"button\" title=\"" + data.translations.video_button_prev_frame + "\"><i class=\"fa fa-step-backward\"></i></button>");
      result.push("<button class=\"vhh-video-player-button vhh-video-player-button-play-backward\" type=\"button\" title=\"" + data.translations.video_button_play_reverse + "\"><i class=\"fa fa-play\"></i><i class=\"fa fa-pause\"></i></button>");
      result.push("<button class=\"vhh-video-player-button vhh-video-player-button-play\" type=\"button\" title=\"" + data.translations.video_button_play + "\"><i class=\"fa fa-play\"></i><i class=\"fa fa-pause\"></i></button>");
      result.push("<button class=\"vhh-video-player-button vhh-video-player-button-next-frame\" type=\"button\" title=\"" + data.translations.video_button_next_frame + "\"><i class=\"fa fa-step-forward\"></i></button>");
      result.push("<button class=\"vhh-video-player-button vhh-video-player-button-next-shot\" type=\"button\" title=\"" + data.translations.video_button_next_shot + "\"><i class=\"fa fa-forward\"></i></button>");
      result.push('</div>');
      result.push('<div class="vhh-video-player-col-right">');
      result.push(this.audioTemplate(data.volume));
      result.push(this.menuTemplate(data.settingsOptions));
      result.push("<button class=\"vhh-video-player-button vhh-video-player-button-fullscreen\" type=\"button\" title=\"" + data.translations.video_button_fullscreen + "\"><i class=\"fa fa-expand\"></i><i class=\"fa fa-compress\"></i></button>");
      result.push('</div>');
      result.push('</div>');
      result.push('</div>');
      result.push('</div>');
      return result.join('');
    };

    VhhVideoPlayer.prototype.audioTemplate = function(volumePercent) {
      var result;
      result = [];
      result.push('<div class="vhh-video-player-audio">');
      result.push('<div class="vhh-video-player-audio-bar">');
      result.push("<div style=\"width: " + volumePercent + "%;\">");
      result.push('<div class="vhh-video-player-audio-grip"></div>');
      result.push('</div>');
      result.push('</div>');
      result.push("<button class=\"vhh-video-player-button vhh-video-player-audio-button\" type=\"button\" title=\"" + this.translations.audio_button + "\"><i class=\"fa\"></i></button>");
      result.push('</div>');
      return result.join('');
    };

    VhhVideoPlayer.prototype.menuTemplate = function(data) {
      var i, item, len, ref, result;
      result = [];
      result.push("<div class=\"vhh-video-player-menu " + data.className);
      if (data.borderless) {
        result.push(" no-border");
      }
      result.push('"');
      if (data.changeButton) {
        result.push(' data-change-button="true"');
      }
      result.push('>');
      result.push("<button type=\"button\" class=\"vhh-video-player-button\"><span>" + data.buttonLabel + "</span></button>");
      result.push('<div class="vhh-video-player-menu-list');
      if (data.alignRight) {
        result.push(' align-right');
      }
      result.push('">');
      ref = data.items;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        switch (item.type) {
          case 'custom':
            result.push("<div class=\"vhh-video-player-menu-list-item custom\">" + item.html + "</div>");
            break;
          default:
            result.push("<button type=\"button\" data-key=\"" + item.key + "\" data-value=\"" + item.value + "\" class=\"vhh-video-player-menu-list-item");
            if (item.active) {
              result.push(' active');
            }
            if (item["default"]) {
              result.push(' default');
            }
            result.push("\"><span class=\"circle\"></span><span class=\"text\">" + item.label + "</span>");
            if (item.defaultLabel != null) {
              result.push(" (" + item.defaultLabel + ")");
            }
            result.push('</button>');
        }
      }
      result.push('</div>');
      result.push('</div>');
      return result.join('');
    };

    VhhVideoPlayer.Video = Video = (function() {
      Video.prototype.FPS_OPTIONS = [1, 2, 6, 12, 16, 18, 20, 22, 24, 25, 36, 48];

      Video.prototype.FILM_LENGTHS = {
        'S8mm': 4.234,
        'N8mm': 3.8025,
        '9.5mm': 7.5415,
        '16mm': 7.605,
        '35mm': 19.000,
        '35mm/3Perf': 14.250,
        '35mm/2Perf': 9.5,
        '65mm': 23.750,
        'IMAX': 71.250
      };

      Video.prototype.fps = 24;

      function Video(data) {
        var foundIndex, fpsOption, i, index, len, ref, ref1;
        this.fps = Number(data.fps);
        if (isNaN(this.fps) || this.fps < 1 || this.fps > 60) {
          this.fps = 24;
        }
        this.fpsOptions = this.FPS_OPTIONS.slice();
        if (ref = this.fps, indexOf.call(this.fpsOptions, ref) < 0) {
          foundIndex = this.fpsOptions.length;
          ref1 = this.fpsOptions;
          for (index = i = 0, len = ref1.length; i < len; index = ++i) {
            fpsOption = ref1[index];
            if (this.fps < fpsOption) {
              foundIndex = index;
              break;
            }
          }
          this.fpsOptions.splice(foundIndex, 0, this.fps);
        }
        this.source = data.source;
        this.hls = data.hls;
        this.frameLength = 1 / this.fps;
        this.frameOffset = this.frameLength * (data.frameOffset || 0);
        this.shots = data.shots;
        this.filmFormat = data.filmFormat;
        this.mask = data.mask;
        if (data.frames != null) {
          this.frames = data.frames;
          this.lastFrameTime = this.frameLength * (data.frames - 1) + (this.frameLength / 4) + this.frameOffset;
        }
      }

      Video.prototype.hasShots = function() {
        return (this.shots != null) && this.shots.length > 0;
      };

      Video.prototype.padStart = function(value, length, character) {
        value = "" + value;
        if (value.length >= length) {
          return value;
        }
        while (value.length < length) {
          value = "" + character + value;
        }
        return value;
      };

      Video.prototype.formatVideoTime = function(timeAsFloat, type) {
        var frames, hours, minutes, result, seconds;
        if (type == null) {
          type = 'frame';
        }
        if (isNaN(timeAsFloat)) {
          return '-';
        }
        if (this.lastFrameTime != null) {
          timeAsFloat = Math.min(timeAsFloat, this.lastFrameTime);
        }
        switch (type) {
          case 'frame':
            result = Math.floor((timeAsFloat - this.frameOffset + (this.frameLength * 0.25)) / this.frameLength) + 1;
            if (this.frames != null) {
              result = Math.min(result, this.frames);
            }
            result = Math.max(1, result);
            return result;
          case 'smpte':
            seconds = Math.floor(timeAsFloat);
            frames = this.formatVideoTime(timeAsFloat - seconds, 'frame');
            minutes = Math.floor(seconds / 60);
            seconds = seconds - (minutes * 60);
            hours = Math.floor(minutes / 60);
            minutes = minutes - (hours * 60);
            hours = this.padStart(hours, 2, '0');
            minutes = this.padStart(minutes, 2, '0');
            seconds = this.padStart(seconds, 2, '0');
            frames = this.padStart(frames, 2, '0');
            return hours + ":" + minutes + ":" + seconds + "." + frames;
          case 'meter':
            return this.getFilmLength(timeAsFloat).toFixed(2);
          case 'inch':
            result = this.getFilmLength(timeAsFloat) * 3.2807322594;
            return result.toFixed(1);
          case 'simple':
            seconds = Math.floor(timeAsFloat);
            minutes = Math.floor(seconds / 60);
            seconds = seconds - (minutes * 60);
            hours = Math.floor(minutes / 60);
            minutes = minutes - (hours * 60);
            minutes = this.padStart(minutes, 2, '0');
            seconds = this.padStart(seconds, 2, '0');
            if (hours > 0) {
              hours = this.padStart(hours, 2, '0');
              return hours + ":" + minutes + ":" + seconds;
            } else {
              return minutes + ":" + seconds;
            }
            break;
          default:
            return timeAsFloat.toFixed(3);
        }
      };

      Video.prototype.convertToVideoTime = function(value, type, fallBackValue) {
        var frames, hours, match, minutes, regEx, seconds;
        if (type == null) {
          type = 'frame';
        }
        if (fallBackValue == null) {
          fallBackValue = 0;
        }
        switch (type) {
          case 'frame':
            value = parseInt(value);
            if (isNaN(value)) {
              return fallBackValue;
            }
            return this.frameLength * (value - 1) + (this.frameLength * 0.25) + this.frameOffset;
          case 'smpte':
            value = "" + value;
            regEx = /^(\d\d):(\d\d):(\d\d).(\d\d)$/;
            match = regEx.exec(value);
            if (match == null) {
              return fallBackValue;
            }
            hours = parseInt(match[1]);
            minutes = parseInt(match[2]);
            seconds = parseInt(match[3]);
            frames = parseInt(match[4]);
            if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || isNaN(frames)) {
              return fallBackValue;
            }
            frames = Math.max(0, frames - 1);
            return (((hours * 60) + minutes) * 60) + seconds + (frames * this.frameLength);
          case 'meter':
            value = Number(value);
            if (isNaN(value)) {
              return fallBackValue;
            }
            return this.getFloatFromFilmLength(value);
          case 'inch':
            value = Number(value);
            if (isNaN(value)) {
              return fallBackValue;
            }
            return this.getFloatFromFilmLength(value) / 3.2807322594;
          case 'simple':
            value = "" + value;
            seconds = 0;
            if (value.length < 3) {
              if (isNaN(value)) {
                return fallBackValue;
              }
              return value;
            } else if (value.length < 6) {
              regEx = /^(\d{1,2}):(\d{1,2})$/;
              match = regEx.exec(value);
              if (match == null) {
                return fallBackValue;
              }
              minutes = parseInt(match[1]);
              seconds = parseInt(match[2]);
              if (isNaN(minutes) || isNaN(seconds)) {
                return fallBackValue;
              }
              return (minutes * 60) + seconds;
            } else {
              regEx = /^(\d{1,2}):(\d{1,2}):(\d{1,2})$/;
              match = regEx.exec(value);
              if (match == null) {
                return fallBackValue;
              }
              hours = parseInt(match[1]);
              minutes = parseInt(match[2]);
              seconds = parseInt(match[3]);
              if (isNaN(hours)(orisNaN(minutes) || isNaN(seconds))) {
                return fallBackValue;
              }
              return (((hours * 60) + minutes) * 60) + seconds;
            }
            break;
          default:
            value = Number(value);
            if (isNaN(value)) {
              return fallBackValue;
            }
            return value;
        }
      };

      Video.prototype.getHlsByResolution = function(key) {
        var i, item, len, ref;
        if (key == null) {
          key = 'auto';
        }
        key = key.toLowerCase();
        ref = this.hls;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item.resolution.toLowerCase() === key) {
            return item;
          }
        }
        return null;
      };

      Video.prototype.getHlsByUrl = function(url) {
        var i, item, len, ref;
        ref = this.hls;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (url.indexOf(item.src) > -1) {
            return item;
          }
        }
        return null;
      };

      Video.prototype.getFilmLength = function(timeAsFloat) {
        var filmLength;
        if (!((this.filmFormat != null) && (this.FILM_LENGTHS[this.filmFormat] != null))) {
          return 0;
        }
        filmLength = this.FILM_LENGTHS[this.filmFormat] || 0;
        return timeAsFloat * this.fps * filmLength / 1000;
      };

      Video.prototype.getFloatFromFilmLength = function(currentFilmLength) {
        var filmLength;
        if (!((this.filmFormat != null) && (this.FILM_LENGTHS[this.filmFormat] != null))) {
          return 0;
        }
        filmLength = this.FILM_LENGTHS[this.filmFormat] || 0;
        return (currentFilmLength * 1000) / (this.fps * filmLength);
      };

      Video.prototype.getCurrentShotIndex = function(frame) {
        var i, index, len, ref, shot;
        if (!this.hasShots()) {
          return null;
        }
        ref = this.shots;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          shot = ref[index];
          if (shot["in"] <= frame && shot.out >= frame) {
            return index;
          }
        }
        return null;
      };

      Video.prototype.getLastShotFrame = function() {
        var i, index, len, ref, result, shot;
        result = 0;
        ref = this.shots;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          shot = ref[index];
          result = Math.max(result, shot.out);
        }
        return result;
      };

      Video.prototype.getFirstShotFrame = function() {
        var i, index, len, ref, result, shot;
        result = this.shots[0]["in"];
        ref = this.shots;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          shot = ref[index];
          result = Math.min(result, shot["in"]);
        }
        return result;
      };

      Video.prototype.getPrevShot = function(frame) {
        var shotIndex;
        if (!this.hasShots()) {
          return null;
        }
        shotIndex = this.getCurrentShotIndex(frame);
        if (shotIndex != null) {
          return this.shots[Math.max(0, shotIndex - 1)];
        } else if (frame > this.getLastShotFrame()) {
          return this.shots[this.shots.length - 1];
        } else {
          return null;
        }
      };

      Video.prototype.getNextShot = function(frame) {
        var shotIndex;
        if (!this.hasShots()) {
          return null;
        }
        shotIndex = this.getCurrentShotIndex(frame);
        if (shotIndex != null) {
          return this.shots[Math.min(shotIndex + 1, this.shots.length - 1)];
        } else if (frame < this.getFirstShotFrame()) {
          return this.shots[0];
        } else {
          return null;
        }
      };

      return Video;

    })();

    return VhhVideoPlayer;

  })();

}).call(this);
